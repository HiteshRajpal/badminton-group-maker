{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","listOfNames","setListOfNames","currentName","setCurrentName","showDuplicateError","setShowDuplicateError","groups","setGroups","insertNameIntoList","indexOf","concat","createMatches","names","n","length","result","slice","temp","i","Math","floor","random","type","placeholder","onKeyDown","event","key","onChange","preventDefault","currentTarget","value","onClick","console","log","style","color","map","name","display","e","array","splice","removeFromList","src","width","height","team","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAqGeA,MAjGf,WAAgB,IAAD,EACyBC,IAAMC,SAAmB,IADlD,mBACNC,EADM,KACOC,EADP,OAEyBH,IAAMC,SAAiB,IAFhD,mBAENG,EAFM,KAEOC,EAFP,OAGuCL,IAAMC,UAAS,GAHtD,mBAGNK,EAHM,KAGcC,EAHd,OAIeP,IAAMC,SAAmB,IAJxC,mBAINO,EAJM,KAIEC,EAJF,KAsBPC,EAAqB,YACgB,GAArCR,EAAYS,QAAQP,IACtBD,EAAc,OAACD,QAAD,IAACA,OAAD,EAACA,EAAaU,OAAO,CAACR,KACpCC,EAAe,IACXC,GACFC,GAAsB,IAIxBA,GAAsB,IAIpBM,EAAgB,SAACC,GAGrB,IAFA,IAAIC,EAAID,EAAME,OACVC,EAASH,EAAMI,QACbH,GAAG,CACP,IAAII,EAAKC,EAETA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWR,KAC/BI,EAAOF,EAAOF,GACdE,EAAOF,GAAKE,EAAOG,GACnBH,EAAOG,GAAKD,EAId,OAAOF,GAqBT,OACE,gCACE,sEACA,0FACA,oDAEA,uBAAOO,KAAK,OAAOC,YAAY,QAAQC,UAvBrB,SAACC,GACH,UAAdA,EAAMC,KAERlB,KAoBiEmB,SA9DhD,SAACF,GACpBA,EAAMG,iBACNzB,EAAesB,EAAMI,cAAcC,QA4DwDA,MAAO5B,IAChG,uBAAOoB,KAAK,SAASS,QAtEA,SAACN,GACxBA,EAAMG,iBACNI,QAAQC,IAAIR,GACZO,QAAQC,IAAIjC,EAAYS,QAAQP,IAChCM,KAkEkDsB,MAAM,gBACrD1B,GAAuB,mBAAG8B,MAAO,CAAEC,MAAO,OAAnB,2CACxB,oCACGnC,QADH,IACGA,OADH,EACGA,EAAaoC,KAAI,SAACC,EAAMnB,GACvB,OAAO,mCAAcmB,EAAd,KAAqB,yBAAQH,MAAO,CAACI,QAAS,gBAAiBP,QAAS,SAACQ,GAAD,OArB/D,SAACd,EAA4CP,GAEnE,IAAIsB,EAAK,YAAOxC,IACJ,IAAPkB,IACLsB,EAAMC,OAAOvB,EAAG,GAChBjB,EAAgBuC,GAChBjC,EAAUI,EAAc6B,KAeoEE,CAAeH,EAAErB,IAA3E,UAC5B,qBAAKyB,IA5EM,8EA4EaC,MAAO,GAAIC,OAAQ,KADf,SAAZ3B,QAIpB,uBAAOI,KAAK,SAASS,QAlEA,SAACN,GACxBlB,EAAUI,EAAcX,KAiE0B8B,MAAM,kBAEtD,6BACGxB,EAAO8B,KAAI,SAACU,EAAM5B,GACjB,OAAO,6BAAa4B,GAAJ5B,YC9EX6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76e76767.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [listOfNames, setListOfNames] = React.useState<string[]>([])\n  const [currentName, setCurrentName] = React.useState<string>('')\n  const [showDuplicateError, setShowDuplicateError] = React.useState(false)\n  const [groups, setGroups] = React.useState<string[]>([])\n  const imgSrcValue =\"https://cdn3.iconfinder.com/data/icons/ui-icons-5/16/cross-small-01-512.png\"\n  const handleClickEvent = (event: React.FormEvent) => {\n    event.preventDefault()\n    console.log(event)\n    console.log(listOfNames.indexOf(currentName))\n    insertNameIntoList()\n  }\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    event.preventDefault()\n    setCurrentName(event.currentTarget.value)\n  }\n\n  const createGroupEvent = (event: React.MouseEvent<HTMLInputElement>) => {\n    setGroups(createMatches(listOfNames))\n  }\n\n  const insertNameIntoList = () => {\n    if (listOfNames.indexOf(currentName) == -1) { // This condition is case - insensitive , some extra logic would be required to do so.\n      setListOfNames(listOfNames?.concat([currentName]))\n      setCurrentName('')\n      if (showDuplicateError) {\n        setShowDuplicateError(false)\n      }\n    } else {\n      // show trying with same name\n      setShowDuplicateError(true)\n    }\n  }\n\n  const createMatches = (names: string[]) => {\n    let n = names.length\n    let result = names.slice()\n    while(n) {\n      let temp,i;\n\n      i = Math.floor(Math.random() * n--)\n      temp = result[n]\n      result[n] = result[i]\n      result[i] = temp\n\n    }\n\n    return result\n    \n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n\n      insertNameIntoList()\n    }\n  }\n\n  const removeFromList =  (event: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    \n    var array = [...listOfNames]; // make a separate copy of the array\n     if (i !== -1) {\n    array.splice(i, 1);\n    setListOfNames( array);\n    setGroups(createMatches(array))\n    }\n  }\n\n  return (\n    <div>\n      <h1>Welcome to Badminton Group Maker App</h1>\n      <p> Enter the list of people who would like to play today!!!</p>\n      <label>Enter the Name:\n        </label>\n      <input type=\"text\" placeholder=\"Names\" onKeyDown={handleKeyDown} onChange={handleChange} value={currentName} />\n      <input type=\"button\" onClick={handleClickEvent} value=\"Add to List\" />\n      {showDuplicateError && (<p style={{ color: 'red' }}>Please Enter a different name</p>)}\n      <ol>\n        {listOfNames?.map((name, i) => {\n          return <li key={i}> {name}  <button style={{display: \"inline-block\"}} onClick={(e) => removeFromList(e,i)} >\n          <img src={imgSrcValue}  width={10} height={10}/> </button></li>\n        })}\n      </ol>\n      <input type=\"button\" onClick={createGroupEvent} value=\"Create Groups\" />\n\n      <ol >\n        {groups.map((team, i) => {\n          return <li key={i}>{team} \n          </li> \n\n        })}\n      </ol>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}